description: >
  Build and install GEOS-ESM multirepo with optional tests

parameters:
  repo:
    type: string
    default: GEOSgcm
    description: "Name of the repo to act upon"
  compiler:
    type: enum
    default: ifort
    description: "Compiler to use"
    enum: ["ifort", "gfortran", "ifx"]
  resource_class:
    type: enum
    default: xlarge
    description: "Resource class to use"
    enum: ["medium", "large", "xlarge"]
  baselibs_version:
    type: string
    default: v7.30.0
    description: "Baselibs version to use"
  checkout_fixture:
    type: boolean
    default: false
    description: "Use custom checkout"
  fixture_branch:
    type: string
    default: ""
    description: "Name of the branch to checkout on the fixture"
  build_type:
    description: Build type for CMake. Must be one of "Debug", "Release", or "Aggressive"
    type: enum
    default: "Debug"
    enum: ["Debug", "Release", "Aggressive"]
  extra_cmake_options:
    description: Extra options to pass to CMake
    type: string
    default: ""
  cmake_generator:
    description: CMake Generator
    type: enum
    default: "Unix Makefiles"
    enum: ["Unix Makefiles", "Ninja"]
  fv_precision:
    description: Precision to build FV3
    type: enum
    default: ""
    enum: ["", "R4", "R8", "R4R8"]
  rebuild_procs:
    description: "Number of processes for rebuild step"
    type: integer
    default: 4
  run_unit_tests:
    description: "Boolean to trigger unit tests"
    type: boolean
    default: false
  ctest_options:
    description: "Options to pass to ctest"
    type: string
    default: ""
  buildtarget:
    description: "Target to build"
    type: string
    default: install
  blobless_clone:
    description: "Optional blobless flag"
    type: boolean
    default: true
  mepodevelop:
    description: "Run mepo develop"
    type: boolean
    default: true
  develop_repos:
    description: "Repos to run mepo develop on"
    type: string
    default: "GEOSgcm_GridComp GEOSgcm_App GMAO_Shared"
  checkout_mapl_branch:
    description: "Checkout MAPL branch"
    type: boolean
    default: false
  checkout_if_exists:
    description: "Run mepo checkout-if-exists"
    type: boolean
    default: true
  persist_workspace:
    description: "Persist the workspace?"
    type: boolean
    default: false
  workspace_root:
    description: "Workspace root"
    type: string
    default: "workspace"
  checkout_mapl3_release_branch:
    description: "Checkout release/MAPL-v3 branches"
    type: boolean
    default: false
  remove_flap:
    description: "Remove FLAP from Baselibs"
    type: boolean
    default: false
  remove_pflogger:
    description: "Remove pFlogger from Baselibs"
    type: boolean
    default: false
  remove_pfunit:
    description: "Remove pFUnit from Baselibs"
    type: boolean
    default: false


executor:
  name: << parameters.compiler >>
  resource_class: << parameters.resource_class >>
  baselibs_version: << parameters.baselibs_version >>

working_directory: /root/project

steps:
  - versions:
      compiler: << parameters.compiler >>

  # For some cases to be correctly handled, we need to remove some
  # packages from Baselibs (e.g., UFS builds)
  - when:
      condition: << parameters.remove_flap >>
      steps:
        - run:
            name: Remove FLAP from Baselibs
            # We now need to delete files from the baselibs
            # install but we don't know the exact path (different on
            # different executors). So we use find to locate the
            # files and then delete them.
            #
            # 1. delete any directory called FLAP
            # 2. delete any file called libFLAP.a
            command: |
              find /baselibs/ -type d -name FLAP -exec rm -rf {} +
              find /baselibs/ -type f -name libFLAP.a -exec rm -f {} +

  - when:
      condition: << parameters.remove_pflogger >>
      steps:
        - run:
            name: Remove pFlogger from Baselibs
            # We now need to delete files from the baselibs
            # install but we don't know the exact path (different on
            # different executors). So we use find to locate the
            # files and then delete them.
            #
            # 1. delete any directory that starts with PFLOGGER
            command: |
              find /baselibs/ -type d -name PFLOGGER* -exec rm -rf {} +

  # For some cases to be correctly handled, we need to remove pFUnit from Baselibs
  - when:
      condition: << parameters.remove_pfunit >>
      steps:
        - run:
            name: Remove pFUnit from Baselibs
            # We now need to delete files from the baselibs
            # install but we don't know the exact path (different on
            # different executors). So we use find to locate the
            # files and then delete them.
            #
            # 1. delete any directory that starts with PFUNIT
            command: |
              find /baselibs/ -type d -name PFUNIT* -exec rm -rf {} +

  # If we have to checkout a fixture, do that...
  - when:
      condition: << parameters.checkout_fixture >>
      steps:
        - checkout_fixture:
            repo: << parameters.repo >>
  # else we use the normal checkout
  - unless:
      condition: << parameters.checkout_fixture >>
      steps:
        - checkout:
            path: << parameters.repo >>
  - when:
      condition: << parameters.fixture_branch >>
      steps:
        - checkout_branch_on_fixture:
            repo: << parameters.repo >>
            branch: << parameters.fixture_branch >>
  - unless:
      condition: << parameters.fixture_branch >>
      steps:
        - checkout_feature_branch_on_fixture_allow_fail:
            repo: << parameters.repo >>
  - mepoclone:
      repo: << parameters.repo >>
      blobless_clone: << parameters.blobless_clone >>
  - when:
      condition: << parameters.mepodevelop >>
      steps:
        - mepodevelop:
            repo: << parameters.repo >>
            subrepos: << parameters.develop_repos >>
  - when:
      condition: << parameters.checkout_mapl3_release_branch >>
      steps:
        - checkout_mapl3_release_branch:
            repo: << parameters.repo >>
  - when:
      condition: << parameters.checkout_mapl_branch >>
      steps:
        - checkout_mapl_branch:
            repo: << parameters.repo >>
  - when:
      condition: << parameters.checkout_if_exists >>
      steps:
        - checkout_if_exists:
            repo: << parameters.repo >>
  - cmake:
      repo: << parameters.repo >>
      compiler: << parameters.compiler >>
      build_type: << parameters.build_type >>
      extra_cmake_options: << parameters.extra_cmake_options >>
      fv_precision: << parameters.fv_precision >>
      cmake_generator: << parameters.cmake_generator >>
  - buildtarget:
      repo: << parameters.repo >>
      rebuild_procs: << parameters.rebuild_procs >>
      target: << parameters.buildtarget >>
      cmake_generator: << parameters.cmake_generator >>
  - when:
      condition: << parameters.run_unit_tests >>
      steps:
        - buildtests:
            repo: << parameters.repo >>
            rebuild_procs: << parameters.rebuild_procs >>
            cmake_generator: << parameters.cmake_generator >>
        - runtests:
            repo: << parameters.repo >>
            ctest_options: << parameters.ctest_options >>
  - when:
      condition: << parameters.persist_workspace >>
      steps:
        - persist_to_workspace:
            root: << parameters.workspace_root >>
            paths:
              - install-<< parameters.repo >>/bin
              - install-<< parameters.repo >>/lib
              - install-<< parameters.repo >>/etc
              - install-<< parameters.repo >>/post
              - install-<< parameters.repo >>/coupled_diagnostics
  - compress_artifacts
  - store_artifacts:
      path: /logfiles
